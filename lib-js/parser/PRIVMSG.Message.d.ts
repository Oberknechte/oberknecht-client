import { messageEmotesReturn } from "oberknecht-utils";
import { userstate } from "./subclasses/PRIVMSG.userstate";
import { message } from "./subclasses/PRIVMSG.message";
import { channel } from "./subclasses/PRIVMSG.channel";
import { server } from "./subclasses/PRIVMSG.server";
import { colorsType } from "oberknecht-api/lib-ts/types/endpoints/color";
export declare class privmsgMessage {
    #private;
    sym: any;
    _raw: string;
    timestamp: number;
    prefix: string | undefined;
    command: string | undefined;
    IRCCommand: string;
    IRCParameters: object;
    IRCMessageParts: string[];
    IRCMessagePrefix: string;
    messageText: string;
    messageParts: string[];
    messageArguments: string[];
    messageID: string;
    senderUserName: string;
    senderDisplayName: string;
    senderUserID: string;
    senderUserType: string;
    senderUserColor: string;
    badgeInfo: string;
    badges: object;
    badgesRaw: string;
    bits: number;
    emotes: messageEmotesReturn;
    emotesRaw: string;
    flags: string | undefined;
    isAction: boolean;
    isSubscriber: boolean;
    isSubscriberRaw: string;
    isMod: boolean;
    isModRaw: string;
    get isBroadcaster(): boolean;
    isVip: boolean;
    isVipRaw: string;
    isCheer: boolean;
    isReply: boolean;
    firstMsg: boolean;
    firstMsgRaw: string;
    turbo: boolean;
    channelName: string;
    channelID: string;
    replyParentDisplayName: string | undefined;
    replyParentMessageBody: string | undefined;
    replyParentMessageBodyRaw: string | undefined;
    replyParentMessageID: string | undefined;
    replyParentUserID: string | undefined;
    replyParentUserLogin: string | undefined;
    serverTimestamp: Date;
    serverTimestampRaw: number;
    serverDelay: number;
    userstate: userstate;
    message: message;
    channel: channel;
    server: server;
    constructor(sym: string, rawMessage: string);
    ban(reason?: string): Promise<any>;
    unban(): Promise<any>;
    timeout(duration: number, reason?: string): Promise<any>;
    untimeout(): Promise<any>;
    delete(): Promise<any>;
    shoutout(): Promise<any>;
    announce(message: string, color?: string): Promise<any>;
    slow(wait_time: number): Promise<any>;
    slowOff(): Promise<any>;
    followers(duration: number): Promise<any>;
    followersOff(): Promise<any>;
    subscribers(): Promise<any>;
    subscribersOff(): Promise<any>;
    emoteOnly(): Promise<any>;
    emoteOnlyOff(): Promise<any>;
    r9k(): Promise<any>;
    r9kOff(): Promise<any>;
    chatdelay(duration: number): Promise<any>;
    chatdelayOff(): Promise<any>;
    mod(userid: string): Promise<any>;
    unmod(userid: string): Promise<any>;
    vip(userid: string): Promise<any>;
    unvip(userid: string): Promise<any>;
    raid(to_broadcaster_id: string): Promise<any>;
    unraid(broadcaster_id: string): Promise<any>;
    updateColor(color: colorsType): Promise<any>;
    getColor(userids: string | string[]): Promise<any>;
    send(message: string): Promise<unknown>;
    reply(message: string): Promise<unknown>;
    action(message: string): Promise<unknown>;
    sendRaw(message: string): Promise<unknown>;
    whisper(message: string): Promise<any>;
}
