import { BadgesMap, messageEmotesReturn } from "oberknecht-utils";
import { userstate } from "./subclasses/USERNOTICE.userstate";
import { message } from "./subclasses/USERNOTICE.message";
import { channel } from "./subclasses/USERNOTICE.channel";
import { server } from "./subclasses/USERNOTICE.server";
export declare class usernoticeMessage {
    sym: any;
    _raw: string;
    timestamp: number;
    IRCCommand: string;
    IRCParameters: object;
    IRCMessageParts: string[];
    badgeInfo: string;
    badges: BadgesMap;
    badgesRaw: string;
    senderUserName: string;
    senderDisplayName: string;
    senderUserID: string;
    senderUserType: string;
    senderUserColor: string;
    targetUserName: string;
    targetUserDisplayName: string;
    targetUserID: string;
    channelName: string;
    channelID: string;
    emotes: messageEmotesReturn;
    emotesRaw: string;
    isMod: boolean;
    isModRaw: string;
    get isBroadcaster(): boolean;
    isVip: boolean;
    isVipRaw: string;
    isSubscriber: boolean;
    isSubscriberRaw: string;
    msgID: string;
    systemMessage: string;
    systemMessageRaw: string;
    messageID: string;
    get isAnySub(): boolean;
    serverTimestamp: Date;
    serverTimestampRaw: number;
    serverDelay: number;
    userstate: userstate;
    message: message;
    channel: channel;
    server: server;
    constructor(sym: string, rawMessage: string);
    ban(reason?: string): Promise<any>;
    unban(): Promise<any>;
    untimeout(): Promise<any>;
    timeout(duration: any, reason: any): Promise<any>;
    delete(): Promise<any>;
    shoutout(): Promise<any>;
    announce(message: string): Promise<any>;
    slow(wait_time: number): Promise<any>;
    slowOff(): Promise<any>;
    followers(duration?: number): Promise<any>;
    followersOff(): Promise<any>;
    subscribers(): Promise<any>;
    subscribersOff(): Promise<any>;
    emoteOnly(): Promise<any>;
    emoteOnlyOff(): Promise<any>;
    r9k(): Promise<any>;
    r9kOff(): Promise<any>;
    chatdelay(duration: number): Promise<any>;
    chatdelayOff(): Promise<any>;
    send(message: string): Promise<unknown>;
    reply(message: string): Promise<unknown>;
    action(message: string): Promise<unknown>;
    sendRaw(message: string): Promise<unknown>;
    whisper(message: string): Promise<any>;
}
