import { oberknechtAPI } from "oberknecht-api";
import { oberknechtEmitter, oberknechtActionEmitter, oberknechtQueueEmitter } from "oberknecht-emitters";
import { clearchatMessage, globaluserstateMessage, noticeMessage, privmsgMessage, usernoticeMessage, userstateMessage, whisperMessage } from "../parser/Message.Types";
declare const onPRIVMSGcallback: (privmsg: privmsgMessage, channelName: string, senderUsername: string, messageText: string) => void;
declare const onGLOBALUSERSTATEcallback: (globaluserstate: globaluserstateMessage) => void;
declare const onCLEARCHATcallback: (clearchat: clearchatMessage) => void;
declare const onNOTICEcallback: (notice: noticeMessage) => void;
declare const onUSERNOTICEcallback: (usernotice: usernoticeMessage) => void;
declare const onUSERSTATEcallback: (userstate: userstateMessage) => void;
declare const onWHISPERcallback: (whisper: whisperMessage) => void;
declare const onErrorcallback: (error: Error) => void;
declare const onAutojoinCallback: (channels: string[]) => void;
declare const onEmptyCallback: () => void;
import { clientOptions } from "../types/oberknechtClient.clientOptions";
import { i } from "..";
export declare class oberknechtClient {
    #private;
    get options(): any;
    get clientData(): any;
    get _allIndex(): typeof i;
    prefix: any;
    API: oberknechtAPI;
    OberknechtEmitter: oberknechtEmitter;
    OberknechtActionEmitter: oberknechtActionEmitter;
    OberknechtQueueEmitter: oberknechtQueueEmitter;
    get symbol(): string;
    get uptime(): number;
    get channels(): any;
    get wsUptime(): number;
    get wsNum(): any;
    get wsConnections(): any;
    get isConnected(): boolean;
    static get symbol(): any;
    static get uptime(): any;
    static get channels(): any;
    static get wsUptime(): any;
    static get wsNum(): any;
    static get wsConnections(): any;
    static get isConnected(): any;
    static get options(): clientOptions;
    static get clientData(): any;
    static get _allIndex(): any;
    constructor(options: clientOptions);
    connect(): Promise<void>;
    destroy(): Promise<void>;
    privmsg: (channel: string, message: string) => Promise<unknown>;
    send: (channel: string, message: string) => Promise<unknown>;
    say: (channel: string, message: string) => Promise<unknown>;
    action: (channel: string, message: string) => Promise<unknown>;
    sendRaw: (message: string) => Promise<unknown>;
    join: (channel: string) => Promise<unknown>;
    joinAll: (channels: string | string[]) => Promise<unknown>;
    part: (channel: string) => Promise<unknown>;
    partAll: (channels: string | string[]) => Promise<void>;
    ping: () => Promise<unknown>;
    whisper: (targetUser: string, message: string, customtoken?: string) => Promise<any>;
    shoutout: (from_broadcaster_id: string, to_broadcaster_id: string, customtoken?: string) => Promise<void>;
    timeout: (broadcaster_id: string, target_user_id: string, duration: number, reason?: string, customtoken?: string) => Promise<import("oberknecht-api/lib-ts/types/endpoints/ban").banResponse>;
    ban: (broadcaster_id: string, target_user_id: string, reason: string, customtoken?: string) => Promise<import("oberknecht-api/lib-ts/types/endpoints/ban").banResponse>;
    unban: (broadcaster_id: string, target_user_id: string, customtoken?: string) => Promise<void>;
    untimeout: (broadcaster_id: string, target_user_id: string, customtoken?: string) => Promise<void>;
    deleteMessage: (broadcaster_id: string, message_id: string, customtoken?: string) => Promise<void>;
    announce: (broadcaster_id: string, message: string, color: "blue" | "green" | "orange" | "purple" | "primary", customtoken?: string) => Promise<void>;
    updateChatSettings: (broadcaster_id: string, settings: import("oberknecht-api/lib-ts/types/endpoints/chatSettings").chatSettingEntry, customtoken?: string) => Promise<import("oberknecht-api/lib-ts/types/endpoints/chatSettings").chatSettingsResponse>;
    slow: (broadcaster_id: string, wait_time: number, customtoken?: string) => Promise<import("oberknecht-api/lib-ts/types/endpoints/chatSettings").chatSettingsResponse>;
    slowOff: (broadcaster_id: string, customtoken?: string) => Promise<import("oberknecht-api/lib-ts/types/endpoints/chatSettings").chatSettingsResponse>;
    followers: (broadcaster_id: string, duration?: number, customtoken?: string) => Promise<import("oberknecht-api/lib-ts/types/endpoints/chatSettings").chatSettingsResponse>;
    followersOff: (broadcaster_id: string, customtoken?: string) => Promise<import("oberknecht-api/lib-ts/types/endpoints/chatSettings").chatSettingsResponse>;
    subscribers: (broadcaster_id: string, customtoken?: string) => Promise<import("oberknecht-api/lib-ts/types/endpoints/chatSettings").chatSettingsResponse>;
    subscribersOff: (broadcaster_id: string, customtoken?: string) => Promise<import("oberknecht-api/lib-ts/types/endpoints/chatSettings").chatSettingsResponse>;
    r9k: (broadcaster_id: string, customtoken?: string) => Promise<import("oberknecht-api/lib-ts/types/endpoints/chatSettings").chatSettingsResponse>;
    uniqueChat: (broadcaster_id: string, customtoken?: string) => Promise<import("oberknecht-api/lib-ts/types/endpoints/chatSettings").chatSettingsResponse>;
    r9kOff: (broadcaster_id: string, customtoken?: string) => Promise<import("oberknecht-api/lib-ts/types/endpoints/chatSettings").chatSettingsResponse>;
    uniqueChatOff: (broadcaster_id: string, customtoken?: string) => Promise<import("oberknecht-api/lib-ts/types/endpoints/chatSettings").chatSettingsResponse>;
    chatdelay: (broadcaster_id: string, duration: 2 | 4 | 6, customtoken?: string) => Promise<import("oberknecht-api/lib-ts/types/endpoints/chatSettings").chatSettingsResponse>;
    chatdelayOff: (broadcaster_id: string, customtoken?: string) => Promise<import("oberknecht-api/lib-ts/types/endpoints/chatSettings").chatSettingsResponse>;
    getChatSettings: (broadcaster_id: string, customtoken?: string) => Promise<import("oberknecht-api/lib-ts/types/endpoints/chatSettings").chatSettingsResponse>;
    mod: (user_id: string, customtoken?: string) => Promise<void>;
    unmod: (broadcaster_id: string, user_id: string, customtoken?: string) => Promise<void>;
    vip: (to_user_id: string, customtoken?: string) => Promise<void>;
    unvip: (broadcaster_id: string, user_id: string, customtoken?: string) => Promise<void>;
    updateColor: (color: string, customtoken?: string) => Promise<void>;
    getColor: (userids: string | string[], customtoken?: string) => Promise<import("oberknecht-api/lib-ts/types/endpoints/color").getColorResponse>;
    raid: (from_broadcaster_id: string, to_broadcaster_id: string, customtoken?: string) => Promise<import("oberknecht-api/lib-ts/types/endpoints/raid").raidResponse>;
    unraid: (broadcaster_id: string, customtoken?: string) => Promise<void>;
    getStreams: (filters: import("oberknecht-api/lib-ts/types/endpoints/getStreams").getStreamsFiltersType, customtoken?: string) => Promise<import("oberknecht-api/lib-ts/types/endpoints/getStreams").getStreamsResponse>;
    getuser: (login: string | undefined, id: string | undefined, noautofilterids: boolean) => Promise<import("oberknecht-api/lib-ts/types/endpoints/_getUsers").userEntry>;
    getusers: (logins: string | string[] | undefined, ids: string | string[] | undefined, noautofilterids: boolean) => Promise<import("oberknecht-api/lib-ts/types/endpoints/_getUsers").userEntry[]>;
    getusername: (userid: string) => Promise<unknown>;
    getuserid: (username: string) => Promise<unknown>;
    on: (eventName: string | string[], callback: Function) => void;
    addListener: (eventName: string | string[], callback: Function) => void;
    off: (eventName: string, callback: Function) => void;
    remove: (eventName: string, callback: Function) => void;
    removeAllListeners: (eventName: string) => void;
    emit: (eventName: string | string[], ...args: any) => void;
    onPRIVMSG: (callback: typeof onPRIVMSGcallback) => void;
    onGLOBALUSERSTATE: (callback: typeof onGLOBALUSERSTATEcallback) => void;
    onCLEARCHAT: (callback: typeof onCLEARCHATcallback) => void;
    onNOTICE: (callback: typeof onNOTICEcallback) => void;
    onUSERNOTICE: (callback: typeof onUSERNOTICEcallback) => void;
    onUSERSTATE: (callback: typeof onUSERSTATEcallback) => void;
    onWHISPER: (callback: typeof onWHISPERcallback) => void;
    onError: (callback: typeof onErrorcallback) => void;
    onReady: (callback: typeof onEmptyCallback) => void;
    onClose: (callback: typeof onEmptyCallback) => void;
    onAutojoin: (callback: typeof onAutojoinCallback) => void;
}
export {};
